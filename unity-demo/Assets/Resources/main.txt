
--end import "UnityEngine"
require "test"

function start()
	
end

function test2()
	local tt = {["hello"] = "world",["hi"] = {}}
end

function main()
	start()
end

function foo3(a,b,c)
	return a,b,c,"slua"
end

function foo2(a,b,c)
	foo3(a,b,c)
	return a,b,c,"slua"
end

function foo1(a,b,c)
  foo2(a,b,c)
	return a,b,c,"slua"
end

function Split(szFullString, szSeparator)  
local nFindStartIndex = 1  
local nSplitIndex = 1  
local nSplitArray = {}  
while true do  
   local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)  
   if not nFindLastIndex then  
    nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))  
    break  
   end  
   nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)  
   nFindStartIndex = nFindLastIndex + string.len(szSeparator)  
   nSplitIndex = nSplitIndex + 1  
end  
return nSplitArray,nSplitIndex  
end

function foo5(a,b,c)
	local t0 = {}
	local t1 = {"hello","world",['three'] = t0}
	local t2 = {"hello","lua"}
	local s = "hello world"
	local tmp = {['one'] = t1,t2,['two'] = 'hi'}
	profiler_snapshot()
end

function fo()
	testMethod()
end
	 
function foo0()
	--local t = {}
	fo()
end	



function foo(a,b,c)
	--profiler_snapshot()
	local count = 0
	local rf = io.open("c:\\hook.csv",'r')
	local output = ""
	local idx = 0
	local key = ""
	local func_map = {}
	local funl_map = {}
	local index = 1
	
	for line in rf:lines() do
		local s = line
		local find = string.find(s,",")
		if find then
			index = index + 1
			local arr,count = Split(s,',')
			if arr[4] ~= "C" then
				if  count >= 9 and arr[count] ~= nil and string.len(tostring(arr[count])) > 0 then
					local name = arr[1] .. "_" .. arr[3] .. "_" .. arr[5] .. "_" .. arr[6] .. "_" .. arr[7]
					if funl_map[name] ~= nil then
						funl_map[name][6] = funl_map[name][6] + tonumber(arr[count])
						funl_map[name][7] = funl_map[name][7] + 1 
					else
						local t = {}
						t[1] = arr[1] --name
						t[2] = arr[3] --source
						t[3] = arr[5] --linedefined
						t[4] = arr[6] --lastlinedefined
						t[5] = arr[7] --currentline
						t[6] = tonumber(arr[count]) --size
						t[7] = 1      --count
						funl_map[name] = t
					end
				end
			else
				if  count >= 9 and arr[count] ~= nil and string.len(tostring(arr[count])) > 0 and tostring(arr[1]) ~= "none" then
					local name = arr[1] .. "_" .. arr[3] .. "_" .. arr[5] .. "_" .. arr[6] .. "_" .. arr[7]
					if func_map[name] ~= nil then
						func_map[name][6] = func_map[name][6] + tonumber(arr[count])
						func_map[name][7] = func_map[name][7] + 1 
					else
						local t = {}
						t[1] = arr[1] --name
						t[2] = arr[3] --source
						t[3] = arr[5] --linedefined
						t[4] = arr[6] --lastlinedefined
						t[5] = arr[7] --currentline
						t[6] = tonumber(arr[count]) --size
						t[7] = 1      --count
						func_map[name] = t
					end
				end
			end
		end				
	end
	rf:close()
	local d = os.date()
	local dr = Split(d," ")
	local t = Split(dr[4],":")
	--local fs = dr[5] .. "-" .. dr[2] .. "-" .. dr[3] .. "-" .. t[1] .. "_" .. t[2] .. "_" .. t[3]	
	local t = string.gsub(d," ","_")
	local fs = string.gsub(t,":","-")
	local wfpl = "c:\\" .. fs .. "_Lua_log.csv"
	local wf = io.open(wfpl,'w')
	output = "function,source,linedefined,lastlinedefined,currentline,totalalloc(char),totalcall,peralloc(char)\n"
	wf:write(output)
	for k,v in pairs(funl_map) do
		local name = ""
		if v[1] == "none" then
			name = v[2]
		else
			name = v[1]
		end
		output = name .. "," .. tostring(v[2]) .. "," .. tostring(v[3]) .. "," .. tostring(v[4]) .. "," .. tostring(v[5]) .. "," .. tostring(v[6]) .. "," .. tostring(v[7]) .. "," .. tostring(v[6]/v[7]) .. "\n"
		wf:write(output)
	end
	wf:close()
	local wfpc = "c:\\" .. fs .. "_C_log.csv"
	wf = io.open(wfpc,'w')
	output = "function,source,linedefined,lastlinedefined,currentline,totalalloc(char),totalcall,peralloc(char)\n"
	wf:write(output)
	for k,v in pairs(func_map) do
		local name = v[1]
		output = name .. "," .. tostring(v[2]) .. "," .. tostring(v[3]) .. "," .. tostring(v[4]) .. "," .. tostring(v[5]) .. "," .. tostring(v[6]) .. "," .. tostring(v[7]) .. "," .. tostring(v[6]/v[7]) .. "\n"
		wf:write(output)
	end
	wf:close()
end

function test()
	local count = 0
	local path = "C:\\Users\\xuerui\\AppData\\LocalLow\\Kingsoft\\ABJX3Pocket\\LuaProfiler\\"
	local fn = "1510219252"
	local suf = "_lua_snapshoot.json"
	local file = (path .. fn .. suf)
	local rf = io.open(file,'r')
	local wfp = path .. fn .. "_snapshot.csv"
	local wf = io.open(wfp,'w')
	local output = ""
	local key = ""
	wf:write("name,address,count\n")
	for line in rf:lines() do
		local s = line
		local find = string.find(s,":")
		if find then
			if string.len(output) > 0 then
				output = output .. "," .. tostring(count) .. "\n"
				wf:write(output)
				output = ""
				count = 0
			end
			local addr = string.sub(s,1,find - 1)
			local name = string.sub(s,find + 1,string.len(s))
			local filter = string.gsub(name,","," ")
			output = filter .. "," .. tostring(addr)
		else
			if string.len(s) > 0 then
				count = count + 1
			end
			--key = key .. " " .. s
		end				
	end
	if string.len(output) > 0 then
		output = output .. "," .. tostring(count) .. "\n"
		wf:write(output)
	end
	wf:close()
	rf:close()
end

function foo7(a,b,c)
	--local S1 = profiler_snapshot()
	--[[
	for k,v in pairs(S1) do
			print('--{ ' .. v .. ' }--')
	end
	]]--
	local t0 = {}
	local t1 = {"hello","world",['three'] = t0}
	local t2 = {"hello","lua"}
	local s = "hello world"
	local tmp = {['one'] = t1,t2,['two'] = 'hi'}
	local function call()
		print()
	end
	--print(t)
	--print(t2)
	--print(tmp)
	--print('-----------------------')
	local S2 = profiler_snapshot()
	
	local filename = "d:\\" .. os.time() .. "_snapshot.log"
	local file = io.open(filename, 'w')
	for k,v in pairs(S2) do
		--if S1[k] == nil then
			--print(k,v)
			local key = string.gsub(tostring(k), 'userdata: ', '')
			--local value = tostring(v)
			--local array = Split(tostring(v),'\n')
			local output = '--------{[key]=' .. tostring(key) .. '\n' .. tostring(v) .. '}\n'
			file:write(output) 
		
		--else
			--output = '{[key]=' .. tostring(k) .. '\n' .. tostring(v) .. '}\n'
			--file:write(output)
			 
		--end
		
	end
	file:close()
	
	return a,b,c,"slua"
end

function stop()
end

local g_callstack = {}
function getcallstack()
	local path = "d:\\callstacktable.csv"
	local path2 = "d:\\callstack2.csv"
	local name = ""
	local callstack = ""
	local rf = io.open(path,'r')
	--local rf2 = io.open(path2,'w')
	local begin = 0
	local cs = ""
	local s = ""
	local key = ""
	local value = ""
	if rf then 
		for line in rf:lines() do
	  	s = line 
	  	if begin == 1 then
	  		local findend = string.find(s,"end")
				if findend then 
					begin = 0
					g_callstack[key] = value
					--local content = key .. " : " .. value .. "\n"
					--rf2:write(content)
				else
					value = value .. s .. "\n"
				end
			else
		  	local findbegin = string.find(s,"begin")
				if findbegin then
					if begin == 0 then
						begin = 1
						value = ""
						key = string.sub(s,8,string.len(s))
					--print("key= " .. findbegin)
					end
				end
			end
		end
		rf:close()
		--rf2:close()
	else
		print("open file failed")
	end 
end


function createwritetable()
	getcallstack()
	local count = 0
	local path = "d:\\eventtable.csv"
	local rf = io.open(path,'r')
	local begin = 0
	local tbl = {}
	local path2 = "d:\\count_funccall_stack.csv"
	local rf2 = io.open(path2,'w')
	local path3 = "d:\\countfunc.csv"
	local rf3 = io.open(path3,'w')
	for line in rf:lines() do
		local s = line
		if 1 == begin then 
		   local findend = string.find(s,"EnterHome")
		   if findend then
		   	for k,v in pairs(tbl) do
		   		local content = v .. ',' .. k .. "\n" .. g_callstack[k]
		   		local content2 = v .. '\t' .. tostring(k) .. '\n'
		   		rf3:write(content2)
		   		rf2:write(content)
		   	end
		   	break
		   else
		   	local find2 = string.find(s," - ")
		   	if find2 then
		   	  	local array,count = Split(tostring(s),' - ')
		   	  	local key = array[1]
		   	  	if tbl[key] == nil then
		   	  		tbl[key] = 1
		   	  	else
		   	  		tbl[key] = tbl[key] + 1
		   	  	end
		   	end
		   end
		else
			local find = string.find(s,"EnterPVP")
			if find then
			 begin = 1
			end
		end 
	end
	rf:close()
	rf2:close()
	rf3:close()
end

function EventFilter()
	local path = "d:\\StatisticsFileEvent.csv"
	local rf = io.open(path,'r')
	local tbl = {}
	for line in rf:lines() do
		local s = line
		local find = string.find(s,",")
		local key = string.sub(s,find + 1,string.len(s))
		--print(key)
		if tbl[key] then
			tbl[key] = tbl[key] + 1
		else
			tbl[key] = 1
		end
	end
	rf:close()

	local tbl2 = {}
	local path2 = "d:\\StatisticsFileInfo.csv"
	local rf2 = io.open(path2,'r')
	for line2 in rf2:lines() do
		local s2 = line2
		local find2 = string.find(s2,",")
		if find2 then
			local key2 = string.sub(s2,1,find2 - 1)
			local value2 = string.sub(s2,find2+1,string.len(s2)) 
			--print(key2 .. "  " .. value2)
			tbl2[key2] = value2
		end
	end
	rf2:close()

	local path3 = "d:\\StatisticsFileEventFilter.csv"
	local rf3 = io.open(path3,'w')
	for k,v in pairs(tbl) do 
	  local content = k .. "," .. v .. "," .. tbl2[k] .. "\n"
		rf3:write(content)
	end
	rf3:close()

end